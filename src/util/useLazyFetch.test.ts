/* Mostly Generated by ChatGPT */

// Note: In this test, the fetch function is mocked using jest.mock. This is because fetch is a browser API and the tests would not run in a Node.js environment.
import React from 'react'
import { useLazyFetch } from './useLazyFetch'

jest.mock('fetch', () => jest.fn(() => Promise.resolve({ json: () => ({}) })))

describe('useLazyFetch', () => {
  it('should call fetch with the correct parameters', async () => {
    const fetchMock = require('fetch') as jest.Mock
    const url = 'https://api.example.com/data'
    const options = { method: 'GET' }
    const [runFetch] = useLazyFetch(url, options)
    await runFetch()
    expect(fetchMock).toHaveBeenCalledWith(url, {
      ...options,
      signal: expect.any(Object),
      body: undefined,
    })
  })

  it('should set the correct state values', async () => {
    const url = 'https://reqres.in/api/users/2'
    const [runFetch, state] = useLazyFetch(url, {})
    expect(state).toEqual({
      response: null,
      error: null,
      loading: false,
      called: false,
    })
    await runFetch()
    expect(state).toEqual({
      response: expect.any(Object),
      error: null,
      loading: false,
      called: true,
    })
  })

  it('should handle errors correctly', async () => {
    const fetchMock = require('fetch') as jest.Mock
    fetchMock.mockImplementation(() => Promise.reject(new Error('fetch error')))
    const [runFetch, state] = useLazyFetch('', {})
    await runFetch()
    expect(state).toEqual({
      response: null,
      error: expect.any(Error),
      loading: false,
      called: true,
    })
  })
})
